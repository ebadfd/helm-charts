# Default values for metube
# This is a YAML-formatted file.

image:
  repository: ghcr.io/alexta69/metube
  pullPolicy: IfNotPresent
  tag: "latest"

replicaCount: 1

imagePullSecrets: []

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

service:
  type: ClusterIP
  port: 8081

# Enable the ingress to expose metube to the network.
ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: metube.local
      paths:
        - path: /
          pathType: Prefix
  tls: []

# Storage configuration for downloads
persistence:
  downloads:
    enabled: true
    storageClass: ""
    accessMode: ReadWriteOnce
    size: 10Gi
    mountPath: /downloads
  state:
    enabled: true
    storageClass: ""
    accessMode: ReadWriteOnce
    size: 1Gi
    mountPath: /downloads/.metube
  temp:
    enabled: false
    storageClass: ""
    accessMode: ReadWriteOnce
    size: 5Gi
    mountPath: /downloads/temp

# MeTube Configuration via environment variables
config:
  # User and group settings
  uid: 1000
  gid: 1000
  umask: "022"

  # DNS Configuration
  # IPv6 can break yt-dlp downloads, so this is a workaround to force IPv4 DNS resolution
  dns:
    enabled: false  # Set to true to enable custom DNS configuration
    policy: "None"  # DNS policy: None, Default, ClusterFirst, ClusterFirstWithHostNet
    nameservers:
      - "8.8.8.8"  # Google DNS (IPv4 only)
    options:
      - name: "single-request-reopen"

  # UI settings
  defaultTheme: "auto"  # light, dark, or auto

  # Directory settings
  downloadDir: "/downloads"
  audioDownloadDir: "/downloads"  # defaults to downloadDir if not set
  downloadDirsIndexable: false
  customDirs: true
  createCustomDirs: true
  customDirsExcludeRegex: "(^|/)[.@].*$"
  stateDir: "/downloads/.metube"
  tempDir: "/downloads"

  # File management
  deleteFileOnTrashcan: false

  # Web server settings
  urlPrefix: "/"
  publicHostUrl: ""
  publicHostAudioUrl: ""
  https: false
  certFile: ""
  keyFile: ""

  # Output templates
  outputTemplate: "%(title)s.%(ext)s"
  outputTemplateChapter: "%(title)s - %(section_number)s %(section_title)s.%(ext)s"
  outputTemplatePlaylist: "%(playlist_title)s/%(title)s.%(ext)s"

  # Playlist settings
  defaultOptionPlaylistStrictMode: false
  defaultOptionPlaylistItemLimit: 0

  # yt-dlp options
  ytdlOptions: "{}"
  ytdlOptionsFile: ""

  # Other settings
  robotsTxt: ""
  downloadMode: "limited"  # sequential, concurrent, or limited
  maxConcurrentDownloads: 3
  logLevel: "INFO"
  enableAccessLog: false

# Reverse Proxy Configuration for serving downloads
# This adds an nginx sidecar to serve the downloads directory as static files
reverseProxy:
  enabled: false  # Set to true to enable nginx sidecar for serving downloads
  image:
    repository: nginx
    tag: "alpine"
    pullPolicy: IfNotPresent
  port: 8080  # Port for the nginx sidecar
  downloadsPath: "/downloads"  # Path to serve downloads from (should match persistence.downloads.mountPath)
  downloadsUrl: "/downloads"   # URL path to access downloads
  proxyDomain: "localhost"     # Domain for proxy configuration (used in Host header)
  
  # Security settings
  security:
    allowExecutables: false    # Whether to allow downloading executable files
    maxFileSize: "100M"        # Maximum file size for downloads (nginx client_max_body_size)
  
  # Additional nginx configuration
  nginxConfig: |
    server {
        listen 8080;
        server_name PROXY_DOMAIN_PLACEHOLDER;
        
        client_max_body_size MAX_FILE_SIZE_PLACEHOLDER;
        
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        
        location /downloads/ {
            alias DOWNLOADS_PATH_PLACEHOLDER/;
            autoindex on;
            autoindex_exact_size off;
            autoindex_localtime on;
            add_header Content-Disposition "inline";
            
            # Security for downloads - block executables if not allowed
            EXECUTABLE_BLOCKING_PLACEHOLDER
        }
        
        # Proxy everything else to the main application
        location / {
            proxy_pass http://localhost:8081;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # Timeout settings
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes
livenessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
readinessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 5
  periodSeconds: 5

# This section is for setting up autoscaling
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
